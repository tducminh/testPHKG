// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Encryption
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CommonCrypto
import CoreData
import CryptoKit
@_exported import Encryption
import Foundation
import LibSignalClient
import MobileCoreServices
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@objc @_inheritsConvenienceInitializers @objcMembers public class SDKDataResponse : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.Array where Element : Swift.Hashable {
  public var hashValue: Swift.Int {
    get
  }
}
@objc(EncryptionProtocol) public protocol EncryptionProtocol {
  @objc func login(thirdPartyToken: Swift.String, thirdServiceId: Swift.String, userId: Swift.String) -> Swift.String
  @objc func sendText(token: Swift.String, thirdPartyId: Swift.String, userIds: [Swift.String], text: Swift.String) -> Swift.String
  @objc func getText(token: Swift.String, thirdPartyId: Swift.String) -> Swift.String
  @objc func sendFile(token: Swift.String, thirdPartyId: Swift.String, userIds: [Swift.String], buffer: Foundation.Data) -> Swift.String
  @objc func getFile(token: Swift.String, thirdPartyId: Swift.String) -> Encryption.SDKDataResponse
  @objc func deleteFile(token: Swift.String, thirdPartyId: Swift.String) -> Swift.String
  @objc func updatePermission(token: Swift.String, thirdPartyId: Swift.String, userIds: [Swift.String]) -> Swift.String
  @objc func restore(token: Swift.String) -> Swift.String
  @objc func logout() -> Swift.String
}
@_inheritsConvenienceInitializers @objc(Encryption) public class Encryption : ObjectiveC.NSObject, Encryption.EncryptionProtocol {
  @objc public func login(thirdPartyToken: Swift.String, thirdServiceId: Swift.String, userId: Swift.String) -> Swift.String
  @objc public func sendText(token: Swift.String, thirdPartyId: Swift.String, userIds: [Swift.String], text: Swift.String) -> Swift.String
  @objc public func getText(token: Swift.String, thirdPartyId: Swift.String) -> Swift.String
  @objc public func sendFile(token: Swift.String, thirdPartyId: Swift.String, userIds: [Swift.String], buffer: Foundation.Data) -> Swift.String
  @objc public func getFile(token: Swift.String, thirdPartyId: Swift.String) -> Encryption.SDKDataResponse
  @objc public func deleteFile(token: Swift.String, thirdPartyId: Swift.String) -> Swift.String
  @objc public func updatePermission(token: Swift.String, thirdPartyId: Swift.String, userIds: [Swift.String]) -> Swift.String
  @objc public func backup(token: Swift.String) -> Swift.String
  @objc public func restore(token: Swift.String) -> Swift.String
  @objc public func logout() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.URL {
  public func mimeType() -> Swift.String
}
final public class LinkedList<T> {
  public class LinkedListNode<T> {
    public init(value: T)
    @objc deinit
  }
  public typealias Node = Encryption.LinkedList<T>.LinkedListNode<T>
  final public var last: Encryption.LinkedList<T>.Node? {
    get
  }
  final public var isEmpty: Swift.Bool {
    get
  }
  final public var count: Swift.Int {
    get
  }
  public init()
  final public subscript(index: Swift.Int) -> T {
    get
  }
  final public func node(at index: Swift.Int) -> Encryption.LinkedList<T>.Node
  final public func append(_ value: T)
  final public func append(_ node: Encryption.LinkedList<T>.Node)
  final public func append(_ list: Encryption.LinkedList<T>)
  final public func insert(_ value: T, at index: Swift.Int)
  final public func insert(_ newNode: Encryption.LinkedList<T>.Node, at index: Swift.Int)
  final public func insert(_ list: Encryption.LinkedList<T>, at index: Swift.Int)
  final public func removeAll()
  @discardableResult
  final public func remove(node: Encryption.LinkedList<T>.Node) -> T
  @discardableResult
  final public func removeLast() -> T
  @discardableResult
  final public func remove(at index: Swift.Int) -> T
  @objc deinit
}
extension Encryption.LinkedList : Swift.CustomStringConvertible {
  final public var description: Swift.String {
    get
  }
}
extension Encryption.LinkedList {
  final public func reverse()
}
extension Encryption.LinkedList {
  final public func map<U>(transform: (T) -> U) -> Encryption.LinkedList<U>
  final public func filter(predicate: (T) -> Swift.Bool) -> Encryption.LinkedList<T>
}
extension Encryption.LinkedList : Swift.ExpressibleByArrayLiteral {
  convenience public init(arrayLiteral elements: T...)
  public typealias ArrayLiteralElement = T
}
extension Encryption.LinkedList : Swift.Collection {
  public typealias Index = Encryption.LinkedListIndex<T>
  final public var startIndex: Encryption.LinkedList<T>.Index {
    get
  }
  final public var endIndex: Encryption.LinkedList<T>.Index {
    get
  }
  final public subscript(position: Encryption.LinkedList<T>.Index) -> T {
    get
  }
  final public func index(after idx: Encryption.LinkedList<T>.Index) -> Encryption.LinkedList<T>.Index
  public typealias Element = T
  public typealias Indices = Swift.DefaultIndices<Encryption.LinkedList<T>>
  public typealias Iterator = Swift.IndexingIterator<Encryption.LinkedList<T>>
  public typealias SubSequence = Swift.Slice<Encryption.LinkedList<T>>
}
public struct LinkedListIndex<T> : Swift.Comparable {
  public static func == <T>(lhs: Encryption.LinkedListIndex<T>, rhs: Encryption.LinkedListIndex<T>) -> Swift.Bool
  public static func < <T>(lhs: Encryption.LinkedListIndex<T>, rhs: Encryption.LinkedListIndex<T>) -> Swift.Bool
}
public struct Units {
  public let bytes: Swift.Int64
  public var kilobytes: Swift.Double {
    get
  }
  public var megabytes: Swift.Double {
    get
  }
  public var gigabytes: Swift.Double {
    get
  }
  public init(bytes: Swift.Int64)
  public func getReadableUnit() -> Swift.String
  public func getReadable() -> Swift.String
}
public let ONE_MINUTE: Swift.Int64
public let ONE_HOUR: Swift.Int64
public let ONE_DAY: Swift.Int64
public let ONE_YEAR: Swift.Int64
public let TIME_CLEAN_ERROR: Swift.Int64
extension Foundation.FileManager {
  public func secureCopyItem(at srcURL: Foundation.URL, to dstURL: Foundation.URL) -> Swift.Bool
}
extension Foundation.Data {
  public init?(hexString: Swift.String)
  public var hexadecimal: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc(AccountMO) public class AccountMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.AccountMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.AccountMO>
  @objc @NSManaged dynamic public var address: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var avatarId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var background_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var birthday: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var block_time: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var first_name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gender: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var last_name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mail: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modified: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var options: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var phone: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pin: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var region_code: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var resendTimes: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var status: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var verifyTimes: Swift.Int32 {
    @objc get
    @objc set
  }
}
extension Encryption.AccountMO : Swift.Identifiable {
  public typealias ID = Swift.String?
}
@_inheritsConvenienceInitializers @objc(AccountGroupMO) public class AccountGroupMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.AccountGroupMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.AccountGroupMO>
  @objc @NSManaged dynamic public var account_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var group_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var invite_by: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modified: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var options: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension Encryption.AccountGroupMO : Swift.Identifiable {
  public typealias ID = Swift.String?
}
@_inheritsConvenienceInitializers @objc(AccountKeyMO) public class AccountKeyMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.AccountKeyMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.AccountKeyMO>
  @objc @NSManaged dynamic public var account_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var device_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var last_resort: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modified: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var public_key: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var signature: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var uuid: Swift.String? {
    @objc get
    @objc set
  }
}
extension Encryption.AccountKeyMO : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(ApiCallMO) public class ApiCallMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.ApiCallMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.ApiCallMO>
  @objc @NSManaged dynamic public var branch_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var content: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var original_content: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var original_uid: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var query: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var retry: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var task: Swift.String? {
    @objc get
    @objc set
  }
}
extension Encryption.ApiCallMO : Swift.Identifiable {
  public typealias ID = Swift.String?
}
@_inheritsConvenienceInitializers @objc(BranchMO) public class BranchMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.BranchMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.BranchMO>
  @objc @NSManaged dynamic public var attachment_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var domain: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modified: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var options: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var public_ip: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension Encryption.BranchMO : Swift.Identifiable {
  public typealias ID = Swift.String?
}
@_inheritsConvenienceInitializers @objc(BranchAccountMO) public class BranchAccountMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.BranchAccountMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.BranchAccountMO>
  @objc @NSManaged dynamic public var account_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var branch_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modified: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var options: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension Encryption.BranchAccountMO : Swift.Identifiable {
  public typealias ID = Swift.String?
}
@_inheritsConvenienceInitializers @objc(CallHistoryMO) public class CallHistoryMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.CallHistoryMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.CallHistoryMO>
  @objc @NSManaged dynamic public var branch_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var calling_members: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var group_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var group_type: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var joined_members: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modified: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var options: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var parent_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var room_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sender_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var source_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var status: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension Encryption.CallHistoryMO : Swift.Identifiable {
  public typealias ID = Swift.String?
}
@_inheritsConvenienceInitializers @objc(ContactMO) public class ContactMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.ContactMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.ContactMO>
  @objc @NSManaged dynamic public var account_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var branch_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var contact_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var contact_name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modified: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var options: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var status: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension Encryption.ContactMO : Swift.Identifiable {
  public typealias ID = Swift.String?
}
@_inheritsConvenienceInitializers @objc(DeviceMO) public class DeviceMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.DeviceMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.DeviceMO>
  @objc @NSManaged dynamic public var account_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var key_f: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var last_seen: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var master_f: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var model_number: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modified: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var options: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var public_key: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var version: Swift.Int64 {
    @objc get
    @objc set
  }
}
extension Encryption.DeviceMO : Swift.Identifiable {
  public typealias ID = Swift.String?
}
@_inheritsConvenienceInitializers @objc(EmojiMO) public class EmojiMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.EmojiMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.EmojiMO>
  @objc @NSManaged dynamic public var created: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var decode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var emoji_group: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var hex_code: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modified: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var version: Swift.String? {
    @objc get
    @objc set
  }
}
extension Encryption.EmojiMO : Swift.Identifiable {
  public typealias ID = Swift.Int16
}
@_inheritsConvenienceInitializers @objc(ErrorMessageRetryMO) public class ErrorMessageRetryMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.ErrorMessageRetryMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.ErrorMessageRetryMO>
  @objc @NSManaged dynamic public var branch_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var device_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var group_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modified: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var options: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var retry: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var source_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension Encryption.ErrorMessageRetryMO : Swift.Identifiable {
  public typealias ID = Swift.String?
}
@_inheritsConvenienceInitializers @objc(ErrorMessageSendNullMO) public class ErrorMessageSendNullMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.ErrorMessageSendNullMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.ErrorMessageSendNullMO>
  @objc @NSManaged dynamic public var branch_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var device_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var group_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modified: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var options: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var retry: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension Encryption.ErrorMessageSendNullMO : Swift.Identifiable {
  public typealias ID = Swift.String?
}
@_inheritsConvenienceInitializers @objc(GroupMO) public class GroupMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.GroupMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.GroupMO>
  @objc @NSManaged dynamic public var avatar_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var branch_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created_by: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var display_state: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var encryption_f: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var group_type: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modified: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var options: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var private_f: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var seen_time: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension Encryption.GroupMO : Swift.Identifiable {
  public typealias ID = Swift.String?
}
@_inheritsConvenienceInitializers @objc(GroupSettingMO) public class GroupSettingMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.GroupSettingMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.GroupSettingMO>
  @objc @NSManaged dynamic public var created: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var group_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modified: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var options: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var setting_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var status: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension Encryption.GroupSettingMO : Swift.Identifiable {
  public typealias ID = Swift.String?
}
@_inheritsConvenienceInitializers @objc(IdentityKeyMO) public class IdentityKeyMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.IdentityKeyMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.IdentityKeyMO>
  @objc @NSManaged dynamic public var device_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var public_key: Swift.String? {
    @objc get
    @objc set
  }
}
extension Encryption.IdentityKeyMO : Swift.Identifiable {
  public typealias ID = Swift.Int32
}
@_inheritsConvenienceInitializers @objc(MessageMO) public class MessageMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.MessageMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.MessageMO>
  @objc @NSManaged dynamic public var account_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var branch_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var call_status: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var content: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var content_decode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var device_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var group_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mentions: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modified: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var options: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var parent_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var send_type: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sender_device_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sender_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var source_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var status: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var third_party_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var thread_id: Swift.String? {
    @objc get
    @objc set
  }
}
extension Encryption.MessageMO : Swift.Identifiable {
  public typealias ID = Swift.String?
}
@_inheritsConvenienceInitializers @objc(NotificationMO) public class NotificationMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.NotificationMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.NotificationMO>
  @objc @NSManaged dynamic public var branch_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var content: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var from_account_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var from_device_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var from_group_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mentions: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modified: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notice_to_account_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notice_to_device_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var options: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var parent: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var status: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension Encryption.NotificationMO : Swift.Identifiable {
  public typealias ID = Swift.String?
}
@_inheritsConvenienceInitializers @objc(OneTimePreKeysMO) public class OneTimePreKeysMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.OneTimePreKeysMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.OneTimePreKeysMO>
  @objc @NSManaged dynamic public var id: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var key_id: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var private_key: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var public_key: Swift.String? {
    @objc get
    @objc set
  }
}
extension Encryption.OneTimePreKeysMO : Swift.Identifiable {
  public typealias ID = Swift.Int64
}
@_inheritsConvenienceInitializers @objc(SenderKeysMO) public class SenderKeysMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.SenderKeysMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.SenderKeysMO>
  @objc @NSManaged dynamic public var account_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created_at: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var device_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var group_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var index_send_number: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var record: Swift.String? {
    @objc get
    @objc set
  }
}
extension Encryption.SenderKeysMO : Swift.Identifiable {
  public typealias ID = Swift.Int64
}
@_inheritsConvenienceInitializers @objc(SenderKeySharedMO) public class SenderKeySharedMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.SenderKeySharedMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.SenderKeySharedMO>
  @objc @NSManaged dynamic public var account_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var device_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var group_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.Int64 {
    @objc get
    @objc set
  }
}
extension Encryption.SenderKeySharedMO : Swift.Identifiable {
  public typealias ID = Swift.Int64
}
@_inheritsConvenienceInitializers @objc(SessionsMO) public class SessionsMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.SessionsMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.SessionsMO>
  @objc @NSManaged dynamic public var account_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var device_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var group_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var index_send_number: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var record: Swift.String? {
    @objc get
    @objc set
  }
}
extension Encryption.SessionsMO : Swift.Identifiable {
  public typealias ID = Swift.Int64
}
@_inheritsConvenienceInitializers @objc(SettingMO) public class SettingMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.SettingMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.SettingMO>
  @objc @NSManaged dynamic public var created: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var descriptions: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modified: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var object_type: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var options: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var setting_type: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension Encryption.SettingMO : Swift.Identifiable {
  public typealias ID = Swift.String?
}
@_inheritsConvenienceInitializers @objc(SignedPreKeysMO) public class SignedPreKeysMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.SignedPreKeysMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.SignedPreKeysMO>
  @objc @NSManaged dynamic public var id: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var key_id: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var private_key: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var public_key: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var signature: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Swift.Int64 {
    @objc get
    @objc set
  }
}
extension Encryption.SignedPreKeysMO : Swift.Identifiable {
  public typealias ID = Swift.Int64
}
@_inheritsConvenienceInitializers @objc(TextSearchMO) public class TextSearchMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension Encryption.TextSearchMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<Encryption.TextSearchMO>
  @objc @NSManaged dynamic public var created: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modified: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var search_history: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.Int16 {
    @objc get
    @objc set
  }
}
extension Encryption.TextSearchMO : Swift.Identifiable {
  public typealias ID = Swift.String?
}
